import type { Compiler } from "webpack";
export declare type WranglerJsCompatWebpackPluginArgs = {
    /**
     * Path to your wrangler configuration file (wrangler.toml).
     * If omitted, an effort is made to find your file.
     */
    pathToWranglerToml?: string;
    /**
     * Specify an environment from your configuration file to build.
     * If omitted, the top-level configuration is used.
     */
    environment?: string;
};
export declare class WranglerJsCompatWebpackPlugin {
    private readonly config;
    private packageDir;
    private output?;
    constructor({ pathToWranglerToml, environment, }?: WranglerJsCompatWebpackPluginArgs);
    apply(compiler: Compiler): void;
    /**
     * Emulates behavior from [`Target::package_dir`](https://github.com/cloudflare/wrangler/blob/master/src/settings/toml/target.rs#L40-L50).
     *
     * We encourage the user to specify the "context" and "entry" explicitly in
     * their webpack config, since wrangler 1 kind of inferred that stuff but
     * wrangler 2 is very hands-off for custom builds.
     *
     * This has to be a synchronous function that only returns something
     * if it encounters an error. In webpack 4 `entryOption` is a
     * [`SyncBailHook`](https://github.com/webpack/tapable#hook-types)
     * ([docs](https://v4.webpack.js.org/api/compiler-hooks/#entryoption)).
     *
     * Docs on `context` and `entry` are [here](https://v4.webpack.js.org/configuration/entry-context/).
     *
     * @param context The base directory, an absolute path, for resolving entry points and loaders from configuration.
     * @param entry The point or points where to start the application bundling process.
     */
    private setPackageDir;
    /**
     * Mimics wrangler-js' [assertions for build output](https://github.com/cloudflare/wrangler/blob/master/wranglerjs/index.js#L52-L92)
     */
    private checkOutputs;
    /**
     * Partially equivalent to [`setup_build`](https://github.com/cloudflare/wrangler/blob/master/src/wranglerjs/mod.rs#L154-L210)
     * in wrangler 1, with the notable exception of preparing to run webpack
     * since we now have the user do that.
     */
    private setupBuild;
    /**
     * Generate a sites-worker if one doesn't exist already.
     * equivalent to [`Site::scaffold_worker`](https://github.com/cloudflare/wrangler/blob/master/src/settings/toml/site.rs#L42-L56)
     * in wrangler 1.
     */
    private scaffoldSitesWorker;
    private bundleAssets;
    /**
     * Mimics [`Bundle::write`](https://github.com/cloudflare/wrangler/blob/master/src/wranglerjs/bundle.rs#L34-L68)
     */
    private writeOutput;
}
export default WranglerJsCompatWebpackPlugin;
